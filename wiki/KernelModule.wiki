#summary How to use the kernel module

= Introduction =

The module has an interface in /proc/overclock/ that allows enabling and disabling of overclock in runtime without rebooting. It works by changing several parameters directly in kernel memory to fool both cpufreq and its lowlevel driver.

The MPU (Microprocessor Unit) clock has 5 discrete pairs of possible rate frequencies and respective voltages, of which only 4 are passed down to cpufreq as you can see with a tool such as SetCPU.  The default frequencies are 125, 250, 500 and 550 MHz (and a hidden 600).  By using this module, you are changing the highest pair in the tables of both cpufreq and MPU frequencies, so it becomes 125, 250, 500 and, say, 800.  It's quite stable up to 1200; beyond that it quickly becomes unusable, specially over 1300, with lockups or spontaneous reboots.

For this to work, the module must know two memory addresses that are specific to each kernel. This version was prepared for Motorola Milestone's official Android 2.1 for Central Europe, build number SHOLS_U2_02.31.0. You can find it here:

http://and-developers.com/motorola_milestone:sbf

or directly at:

https://rsddownload.motorola.com/download/SHOLS_U2_02.31.0_UCASHLSMR2EMEAB1B805C.0R_PDS003_USASHLS00RTEU_P042_A005_HWp2a_1FF.sbf.gz

Other Milestone firmwares will most likely require minor changes to the addresses, as described below. The addresses I'm using were found by disassembling certain functions extracted from kernel memory, see the [Disassembly] page. Testers welcome!

= Usage =

The module is created at /data/data/pt.com.darksun.milestoneoverclock/files/overclock.ko when it is first loaded through the app. Afterwards you can load and use it directly:

{{{
insmod overclock.ko
echo 62 > /proc/overclock/max_vsel
echo 800000 > /proc/overclock/max_rate
}}}
	
You should set max_vsel before max_rate if the new rate is going to be higher than the current one, because higher frequencies often require more voltage than supplied by default.  Likewise, lower the max_rate first before max_vsel if you want to reduce both frequency and voltage:

{{{
echo 550000 > /proc/overclock/max_rate
echo 56 > /proc/overclock/max_vsel
}}}

To set a specified frequency and voltage at load time:
insmod overclock.ko max_rate=800000 max_vsel=62

Remember that you are merely changing the maximum possible value that cpufreq can choose to use.  The current speed may well be lower than the one specified if the phone is idle.  I recommend the use of the SetCPU app to effectively change the current frequency through its policies.

You may also supply the addresses of the two needed in-memory kernel structures which may change with the firmware build and will probably have to be supplied either at load time with the freq_table_addr and mpu_opps_ptr_addr parameters or with their respective /proc entries.  Finding out the values will require live disassembly of kernel code.  See the [Disassembly] page for more information.

Frequencies/Voltages that appear to work well together:

|| *Frequency (KHz)* || *Voltage (mV)* ||
|| 550000 || 56 ||
|| 600000 || 62 ||
|| 800000 || 68 ||
|| 1000000 || 74 ||
|| 1200000 || 80 ||

The maximum voltage I could use was 127. Frequencies above 1250000 usually reboot spontaneously.